version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: wellness-postgres
    environment:
      POSTGRES_DB: wellness_coach
      POSTGRES_USER: wellness_user
      POSTGRES_PASSWORD: wellness_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - wellness-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U wellness_user -d wellness_coach"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for session management and caching
  redis:
    image: redis:7-alpine
    container_name: wellness-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - wellness-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass wellness_redis_pass
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: wellness-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://wellness_user:wellness_pass@postgres:5432/wellness_coach
      REDIS_URL: redis://:wellness_redis_pass@redis:6379
      ASI_ONE_API_KEY: ${ASI_ONE_API_KEY}
      FETCH_AI_AGENT_KEY: ${FETCH_AI_AGENT_KEY}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      JWT_SECRET: ${JWT_SECRET}
      PORT: 3000
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - wellness-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI Services (Python)
  ai-services:
    build:
      context: ./ai
      dockerfile: Dockerfile
    container_name: wellness-ai
    environment:
      REDIS_URL: redis://:wellness_redis_pass@redis:6379
      ASI_ONE_API_KEY: ${ASI_ONE_API_KEY}
      MODEL_CACHE_DIR: /app/models
    ports:
      - "8000:8000"
    volumes:
      - ./ai:/app
      - ai_models:/app/models
    networks:
      - wellness-network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP Server for context management
  mcp-server:
    build:
      context: ./mcp
      dockerfile: Dockerfile
    container_name: wellness-mcp
    environment:
      REDIS_URL: redis://:wellness_redis_pass@redis:6379
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      DATABASE_URL: postgresql://wellness_user:wellness_pass@postgres:5432/wellness_coach
    ports:
      - "9000:9000"
    volumes:
      - ./mcp:/app
    networks:
      - wellness-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Development tools
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: wellness-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@wellness.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8080:80"
    networks:
      - wellness-network
    depends_on:
      - postgres
    profiles:
      - tools

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: wellness-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - wellness-network
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: wellness-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - wellness-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ai_models:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  wellness-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 